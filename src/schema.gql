# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Comment {
  id: Int!
  content: String!
  postId: Int!
  userId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type User {
  id: Int!
  userName: String!
  avatar: String!
  bio: String!
  phone: String!
  email: String!
  status: String!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Campaign {
  id: Int!
  name: String!
  description: String!
  startDate: DateTime!
  endDate: DateTime!
  status: String!
  userId: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
}

type Partner {
  id: Int!
  campaignId: Int!
  userId: Int!
  createdAt: DateTime!
}

type Banner {
  id: Int!
  createdBy: Int!
  campaignId: Int!
  position: Int!
  page: Int!
  price: Int!
  image_ar: String!
  image_en: String!
  redirect: String!
  url_ar: String!
  url_en: String!
  isActive: Boolean!
  score: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type AuthOutPut {
  user: User!
  token: String!
}

type AuthResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: AuthOutPut
}

type UserResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: User
}

type PaginationInfo {
  totalPages: Int!
  currentPage: Int!
  totalItems: Int!
}

type PostOutput {
  id: Float!
  content: String!
  banner: Banner!
  user: User!
  likes: Int!
  comments: [Comment!]
  createdAt: DateTime!
}

type PostsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [PostOutput!]
  pagination: PaginationInfo
}

type PostResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: PostOutput
}

type LikeOutput {
  id: Float!
  post: PostOutput!
  user: User!
  createdAt: DateTime!
}

type LikesResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [LikeOutput!]
  pagination: PaginationInfo
}

type LikeResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: LikeOutput
}

type CommentOutput {
  id: Float!
  content: String
  post: PostOutput!
  user: User!
  createdAt: DateTime!
}

type CommentsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [CommentOutput!]
  pagination: PaginationInfo
}

type CommentResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: CommentOutput
}

type CampaignOutput {
  id: Int!
  name: String!
  description: String!
  status: CampaignStatus!
  startDate: DateTime!
  endDate: DateTime!
  createdAt: DateTime!
  user: User!
}

"""Campaign lifecycle statuses"""
enum CampaignStatus {
  DRAFT
  PENDING
  APPROVED
  ACTIVE
  PAUSED
  COMPLETED
  CANCELLED
  REJECTED
}

type CampaignsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [CampaignOutput!]
  pagination: PaginationInfo
}

type CampaignResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: CampaignOutput
}

type partnerOutput {
  id: Int!
  createdAt: DateTime!
  campaign: Campaign!
  user: User!
}

type PartnersResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [partnerOutput!]
  pagination: PaginationInfo
}

type PartnerResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: partnerOutput
}

type BannerOutput {
  id: Int!
  position: Int!
  price: Int!
  page: Int!
  clicks: Int!
  views: Int!
  url_ar: String!
  url_en: String!
  image_ar: String!
  image_en: String!
  redirect: String
  isActive: Boolean!
  createdAt: DateTime!
  createdBy: Partner!
  campaign: CampaignOutput!
}

type BannersResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [BannerOutput!]
  pagination: PaginationInfo
}

type BannerResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: BannerOutput
}

type InteractionOutput {
  id: Float!
  type: InterActionType!
  user: User!
  banner: BannerOutput!
  createdAt: DateTime!
}

"""Types of interactions"""
enum InterActionType {
  VIEW
  CLICK
}

type InteractionsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [InteractionOutput!]
  pagination: PaginationInfo
}

type InteractionResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: InteractionOutput
}

type FollowOutput {
  id: Int!
  createdAt: DateTime!
  follower: User!
  following: User!
  status: String!
}

type FollowsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [FollowOutput!]
  pagination: PaginationInfo
}

type FollowResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: FollowOutput
}

type VendorOutput {
  id: Float!
  banner: Banner!
  user: User!
  campaign: Campaign!
  createdAt: DateTime!
}

type VendorsResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [VendorOutput!]
  pagination: PaginationInfo
}

type VendorResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: VendorOutput
}

type CreateBuyer {
  id: Int!
  paymentMethod: String!
  createdAt: DateTime!
  user: User!
  banner: Banner!
  session: String
}

type CreateBuyerResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: CreateBuyer
}

type BuyerOutput {
  id: Int!
  paymentMethod: String!
  createdAt: DateTime!
  user: User!
  banner: Banner!
}

type BuyersResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [BuyerOutput!]
  pagination: PaginationInfo
}

type BuyerResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: BuyerOutput
}

type ReplyOutPut {
  id: Float!
  content: String!
  comment: Comment!
  user: User!
  createdAt: DateTime!
}

type ReplysResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  items: [ReplyOutPut!]
  pagination: PaginationInfo
}

type ReplyResponse {
  message: String
  success: Boolean
  timeStamp: String
  statusCode: Float
  data: ReplyOutPut
}

type Query {
  sayHello: String!
  getUserById(id: Float!): UserResponse!
  getUserByEmail(email: String!): UserResponse!
  getUserByUserName(userName: String!): UserResponse!
  deleteUser: UserResponse!
  getVendorById(id: Int!): VendorResponse!
  getVendors(page: Int, limit: Int): VendorsResponse!
  getBannerVendor(bannerId: Int!): UserResponse!
  getUserVendor(userId: Int!, page: Int, limit: Int): VendorsResponse!
  getBuyer(id: Int!): BuyerResponse!
  getAllBuyers(page: Int, limit: Int): BuyersResponse!
  getBuyersByBannerId(bannerId: Int!, page: Int, limit: Int): BuyersResponse!
  getBuyersByUserId(userId: Int!, page: Int, limit: Int): BuyersResponse!
  getRelationStatus(followingId: Float!): FollowResponse!
  getFollowers(followerId: Float!, page: Int, limit: Int): FollowsResponse!
  getFollowings(followingId: Float!, page: Int, limit: Int): FollowsResponse!
  getFriends(page: Int, limit: Int): FollowsResponse!
  getCampaignById(id: Int!): CampaignResponse!
  getCampaigns(campaignDto: CampaignDto, page: Int, limit: Int): CampaignsResponse!
  getListCampaigns(page: Int, limit: Int): CampaignsResponse!
  getPartnerById(id: Int!): PartnerResponse!
  partnersByCampaign(campaignId: Int!, page: Int, limit: Int): PartnersResponse!
  partnersByUser(userId: Int!, page: Int, limit: Int): PartnersResponse!
  getInteractionById(id: Int!): InteractionResponse!
  getInteractions(page: Int, limit: Int): InteractionsResponse!
  getUserInteractionsByAdmin(userId: Int!, page: Int, limit: Int): InteractionsResponse!
  getUserInteractions(page: Int, limit: Int): InteractionsResponse!
  countAdViews(adId: Int!): InteractionResponse!
  countAdCkicks(adId: Int!): InteractionResponse!
  getMostViews(limit: Int): InteractionsResponse!
  getMostClicks(limit: Int): InteractionsResponse!
  bannerById(id: Int!): BannerResponse!
  bannersByCampaign(campaignId: Int!, page: Int, limit: Int): BannersResponse!
  getBanners(page: Int, limit: Int): BannersResponse!
  getPostById(id: Int!): PostResponse!
  searchPosts(content: String, page: Int, limit: Int): PostsResponse!
  getUserPosts(userId: Int!): PostsResponse!
  likedUser(page: Int, limit: Int): LikesResponse!
  postLikeCount(postId: Int!): LikeResponse!
  getCommentById(id: Int!): CommentResponse!
  getComment(postId: Int!, content: String!): CommentResponse!
  getCommentsForPost(postId: Int!, page: Int, limit: Int): CommentsResponse!
  getCountCommentPost(postId: Int!): Int!
  getCommentsByUserOnPost(postId: Int!): CommentsResponse!
  getCommentsByUser: CommentsResponse!
  getUserByComment(commentId: Int!): UserResponse!
  getPostByComment(commentId: Int!): PostResponse!
  getReply(commentId: Float!, content: String!): ReplyResponse!
  getRepliesByComment(commentId: Float!): ReplysResponse!
  getRepliesCount(commentId: Float!): ReplyResponse!
  getRepliesByUser(page: Int, limit: Int): ReplysResponse!
  getLastReplies(commentId: Float!, page: Int, limit: Int): ReplysResponse!
  getUserByReply(id: Float!): UserResponse!
}

input CampaignDto {
  name: String
  description: String
  startDate: DateTime
  endDate: DateTime
  createdAt: DateTime
}

type Mutation {
  register(fcmToken: String!, createUserDto: CreateUserDto!, avatar: CreateImagDto): AuthResponse!
  login(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  forgotPassword: AuthResponse!
  resetPassword(resetPasswordDto: ResetPasswordDto!): AuthResponse!
  changePassword(changePasswordDto: ChangePasswordDto!): AuthResponse!
  adminLogin(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  partnerLogin(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  managerLogin(fcmToken: String!, loginDto: LoginDto!): AuthResponse!
  logout: Boolean!
  updateUser(updateUserDto: UpdateUserDto!): UserResponse!
  UpdateUserRole(email: String!): String!
  createVendor(bannerId: Int!, campaignId: Int!, userId: Int!): VendorResponse!
  deleteVendor(id: Int!): VendorResponse!
  createBuyer(bannerId: Int!): CreateBuyerResponse!
  deleteBuyer(id: Int!): BuyerResponse!
  followUser(followingId: Float!): FollowResponse!
  unfollowingUser(followerId: Float!): FollowResponse!
  acceptFollowRequest(followingId: Float!, status: Boolean!): FollowResponse!
  createCampaign(createCampaignDto: CreateCampaignCDto!): CampaignResponse!
  UpdateCampaign(id: Int!, updateCampaignDto: CampaignDto!): CampaignResponse!
  deleteCampaign(id: Int!): CampaignResponse!
  addPartner(campaignId: Int!, userId: Int!): PartnerResponse!
  deletePartner(id: Int!): PartnerResponse!
  createInteraction(data: CreateInteractionDto!): InteractionResponse!
  createBanner(createBannerDto: CreateBannerDto!, imageAr: CreateImagDto!, imageEn: CreateImagDto!): BannerResponse!
  updateBanner(id: Int!, campaignId: Int!, updateBannerDto: UpdateBannerDto!): BannerResponse!
  deleteBanner(id: Int!, campaignId: Int!): BannerResponse!
  createPost(content: String!, bannerId: Int!): PostResponse!
  updatePost(id: Int!, content: String!): PostResponse!
  deletePost(id: Int!): PostResponse!
  likePost(postId: Int!): LikeResponse!
  unlikePost(postId: Int!): String!
  writeComment(postId: Int!, content: String!): CommentResponse!
  updateComment(commentId: Int!, content: String!): CommentResponse!
  deleteComment(commentId: Int!): CommentResponse!
  writeReply(commentId: Float!, content: String!): ReplyResponse!
  updateReply(id: Float!, content: String!): ReplyResponse!
  deleteReply(id: Float!): ReplyResponse!
}

input CreateUserDto {
  userName: String!
  email: String!
  bio: String
  password: String!
  phone: String!
}

input CreateImagDto {
  name: String
  breed: String
  image: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input LoginDto {
  email: String!
  password: String!
}

input ResetPasswordDto {
  token: String!
  password: String!
}

input ChangePasswordDto {
  password: String!
  newPassword: String!
}

input UpdateUserDto {
  userName: String
  avatar: CreateImagDto
  email: String
  phone: String
}

input CreateCampaignCDto {
  name: String!
  description: String!
  startDate: DateTime!
  endDate: DateTime!
}

input CreateInteractionDto {
  type: InterActionType!
  bannerId: Int!
}

input CreateBannerDto {
  campaignId: Int!
  position: Int!
  page: Int!
  price: Int!
  url_ar: String!
  url_en: String!
  redirect: String
  isActive: Boolean!
}

input UpdateBannerDto {
  position: Int
  price: Int!
  page: Int
  url_ar: String
  url_en: String
  redirect: String
  isActive: Boolean
}